import { Plugin, LoadContext } from "@docusaurus/types";
import fs from "fs/promises";
import path from "path";

import { generatePages } from "./generatePages";

export * from "./generateFoxgloveSchemaRedirects";

export default async function (_context: LoadContext, _options: unknown): Promise<Plugin> {
  const dir = path.join(
    __dirname,
    "..",
    "..",
    "..",
    "docs",
    "4-visualization",
    "2-message-schemas",
  );

  const existingFiles = await fs.readdir(dir).catch(() => {
    throw new Error(
      `Autogenerating Foxglove schemas failed: target directory does not exist (${dir})`,
    );
  });
  for (const file of existingFiles) {
    if (file.endsWith(".generated.md")) {
      await fs.rm(path.join(dir, file));
    }
  }

  const generatedPaths: string[] = [];
  for (const page of generatePages()) {
    const pagePath = path.join(dir, `${100 + generatedPaths.length}-${page.slug}.generated.md`);
    generatedPaths.push(pagePath);
    await fs.writeFile(pagePath, page.markdownContent);
  }
  console.log("Autogenerated Foxglove schema pages");

  return {
    name: "foxglove-schemas",

    async postBuild(_props) {
      console.log("Removing autogenerated Foxglove schema files");
      for (const pagePath of generatedPaths) {
        await fs.rm(pagePath);
      }
    },
  };
}
